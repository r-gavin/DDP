"ice jam flood minor","flood",
"microburst","tornado",
"wet microburst","tornado",
"winter weather mix","winter weather",
"wintry mix","winter weather",
"mud slide","avalanche",
"mudslide","avalanche",
"mudslides","avalanche",
"non tstm wind","strong wind",
"torrential rainfall","heavy rain",
"record heat","excessive heat",
"river flood","flood",
"ice on road","frost freeze",
"ice roads","frost freeze",
"rock slide","avalanche",
"rogue wave","high surf",
"heavy seas","high surf",
"high seas","high surf",
"rough seas","high surf",
"unseasonable cold","cold wind chill",
"unseasonably cold","cold wind chill",
"unseasonably warm","cold wind chill",
"unseasonal rain","heavy rain",
"heavy snow shower","heavy snow",
"small hail","hail",
"freezing spray","sleet",
"snow squall","heavy snow",
"snow squalls","heavy snow",
"high swells","high surf",
"cold temperature","cold wind chill",
"marine tstm wind","marine thunderstorm wind",
"tstm wind hail","thunderstorm wind",
"tstm wind ","thunderstorm wind",
"tstm wind","thunderstorm wind",
"warm weather","heat",
"heat wave","heat",
"whirlwind","tornado",
"extreme windchill","extreme cold wind chill",
"high winds","high wind",
"strong winds","strong wind",
"winds","strong wind",
"avalanches","avalanche",
"coastal storm","tropical storm",
"cold weather","cold wind chill",
"excessive snow","heavy snow",
"flash flood flood","flash flood",
"flood flash flood","flash flood",
"light freezing rain","sleet",
"freezing rain","sleet",
"heavy rain high surf","heavy rain",
"heavy snows","heavy snow",
"heavy surf high surf","high surf",
"high surf advisory","high surf",
"heavy surf","high surf",
"high water","high surf",
"marinethunderstorm wind","marine thunderstorm wind",
"rain snow","heavy rain",
"mixed precipitation","heavy rain",
"mixed precip","heavy rain",
"rough surf","high surf",
"strong wind hail","strong wind",
"strong wind hvy rain","strong wind",
"strong wind rain","strong wind",
"wet tornado","waterspout",
"fog","dense fog",
"rain","heavy rain",
"frost","frost freeze",
"hurricane","hurricane typhoon",
"typhoon","hurricane typhoon",
"wind","strong wind",
"cold","cold wind chill",
"extreme cold","cold wind chill",
"freeze","frost freeze",
"snow","heavy snow",
"storm surge","storm surge tide",
"thunderstorm","thunderstorm wind"
),
ncol=2,byrow=TRUE)
regex
dim(regex)
dim(regex)[1]
dim(regex,1
)
library(swirl)
swirl()
3.5
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
smeans
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair-3.5^2
sum(dice_sqr*dice_high) - edh^2
matrix(rnorm(10000),1000)
apply(matrix(rnorm(10000),1000),1,mean)
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
.5*1/sqrt(10)
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
poisson.test(10,3,5,alternative = "less")
pbinom(.5,3,lower.tail = FALSE)
pbinom(3,prop=.5,lower.tail = FALSE)
pbinom(3,prob=.5,lower.tail = FALSE)
pbinom(3,5,prob=.5,lower.tail = FALSE)
.5^5*choose(5,4)
.5^5*choose(5,5)
.5^5*choose(5,4:5)
sum(.5^5*choose(5,4:5))
library(swirl)
swirl()
choose(5,3)*.8^3*.2^2 + choose(5,4)*.8^4*.2 + choose(5,5)*.8^5*.2^0
pbinom
pbinom(2,size=5,prob = .8,lower.tail = FALSE)
qnorm(.1)
0
qnorm(.975,3,2)
1.96*2+3
pnorm(1200,mean = 1020, sd = 50, lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail = FALSE)
qnorm(.75,mean = 1020,sd = 50)
.53
.53
ppois(3,4*2.5)
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(95)
qnorm(.95)
60+c(1,1)*qnorm(.975)*(sqrt(1/2*1/2*1/100))
60+c(-1,1)*qnorm(.975)*(sqrt(1/2*1/2*1/100))
60+c(-1,1)*qnorm(.975)*(sqrt(.6*.4/100))
.60+c(-1,1)*qnorm(.975)*(sqrt(.6*.4/100))
.6+c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)
binom.test(60,100)$conf.int
qui
quit()
library(swirl)
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(95)
qnorm(.95)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
5/94.32 + c(-1,1)*qnorm(.975)*sqrt(5)/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
quit()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- (7)*(15.34)^2 + (20)*(18.23)^2
ns <- 27
sp <- sqrt(sp/ns)
(132.86-127.44) + c(-1,1)*qt(132.86-127.44,27)*sp*sqrt(1/8+1/21)
(132.86-127.44) + c(-1,1)*qt(.975,27)*sp*sqrt(1/8+1/21)
(132.86-127.44) + c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
132.86-127.44 + c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(.975,20)*sp*sqrt(1/10+1/10)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/10+1/10)
t.test(g2,g1,paired = TRUE)$conf.int
t.test(g2,g1,paired = FALSE,var.equal = TRUE)$conf.int
t.test(g2,g1,paired = FALSE,var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf
num <- (15.34^2/8 + 18.23^/21)^2
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (((15.34^2/8)^2)/7 + ((18.23^2/21)^2)/20)
mydf <- num/den
132.86-127.44 + c(-1,1)*qt(.975,mydf)*sqrt(sqrt(num))
132.86-127.44 + c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
quit
quit()
library(swirl)
swirl()
1
2
.5
2.5
2/2.5
15
qt(.95,15)
dim(fs)
t.test(fs$sheight,fs$fheight,paired = TRUE)
11.7885*sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(q=2.5,df=15,lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(1.96)
pnorm(2,lower.tail = FALSE)
mybin
binom(0)
pbinom(6,size = 8,prob = .5,lower.tail = FALSE)
pbinom(7,size = 8,prob = .5,lower.tail = TRUE)
ppois(9,5,lower.tail = FALSE)
quit()
qt(.975,8)
2.306004*30
3-5+c(-1,1)*qt(.95,18)*sqrt(.60^2/9+.68^2/9)/sqrt(18)
3-5+c(-1,1)*qt(.95,18)*sqrt(.60^2/10+.68^2/10)/sqrt(18)
qt(.95,8)
2/qt(.95,8)
2*qt(.95,8)
qt(.95,8)
qt(.95,8)/18
qt(.95,8)*2.10
qt(.95,8)*2.60
%/9
sqrt(8)
2*sqrt(8)
2*sqrt(8)/qt(.95,8)
2*sqrt(8)/qt(.975,8)
2*sqrt(9)/qt(.975,8)
2*sqrt(9)/qt(.95,8)
-2 + qt(.975,8)*2.6/sqrt(9)
1100 + c(-1,1)*qt(.975,8)*30/3
3-5+c(-1,1)*qt(.975,18)*sqrt((.6^2+.68^2)/2)*sqrt(1/10 + 1/10)
3-5+c(-1,1)*qt(.95,18)*sqrt((.6^2+.68^2)/2)*sqrt(1/10 + 1/10)
3-5+c(-1,1)*qt(.975,20)*sqrt((.6^2+.68^2)/2)*sqrt(1/10 + 1/10)
3-5+c(-1,1)*qt(.975,18)*sqrt(.6^2/2+.68^2/2)*sqrt(1/10 + 1/10)
qt(.95,9)
qt(.975,9)
-3-1 + c(-1,1)*qt(.95,16)*sqrt(1.5^2/2+1.8^2/2)*sqrt(1/9+1/9)
4-6+c(-1,1)*qnorm(.975)*sqrt(.5^2/100+2^2/100)
2+c(-1,1)*qnorm(.975)*sqrt(.5^2/100+2^2/100)
3-5+c(-1,1)*qt(.975,18)*sqrt(.6^2/2+.68^2/2)*sqrt(1/10 + 1/10)
qt(.975,18)
.6^2+.68^2
.6^2/2+.68^2/2
sqrt(.6^2/2+.68^2/2)
sqrt(1/5)
0.4472136*0.6412488
0.2867752*qt(0.975,18)
0.2867752*qt(0.95,18)
0.2867752*qt(0.975,16)
0.2867752*qt(0.975,9)
3-5+c(-1,1)*qt(.975,18)*sqrt(.6/2+.68/2)*sqrt(1/10 + 1/10)
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z,mean=30,lower.tail = FALSE)
pnorm(30+z,mean=32,lower.tail = FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail = FALSE)
pnorm(30+z,mean=32,sd=2,lower.tail = FALSE)
pnorm(30+2*z,mean=32,sd=2,lower.tail = FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail = FALSE)
power.t.test(n=16,delta = 2/4,sd)
power.t.test(n=16,delta = 2/4,sd=1,type = "one.sample",alt="one.sided")$power
power.t.test(n=16,delta = 2,sd=4,type = "one.sample",alt="one.sided")$power
power.t.test(n=16,delta = 100,sd=200,type = "one.sample",alt="one.sided")$power
power.t.test(power=.8,delta = 2/4,sd=1,type = "one.sample",alt="one.sided")$n
power.t.test(power=.8,delta = 2,sd=4,type = "one.sample",alt="one.sided")$n
power.t.test(power=.8,delta=100,sd=200,type = "one.sample",alt="one.sided")$n
power.t.test(power=.8,n=26,sd=1,type="one.sample",alt="one.sided")$delta
power.t.test(power=.8,n=27,sd=1,type="one.sample",alt="one.sided")$delta
head(pValues)
sum(pValues < .05)
sum(p.adjust(pValues,method = "bonferroni")<.05)
sum(p.adjust(pValues,method = "BH")<.05)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
24/500
table(p.adjust(pValues2,method = "bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method = "BH") < 0.05, trueStatus)
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh,nh*B,replace = TRUE)
resam <- matrix(sam,nrow = B, ncol = nh)
meds <- apply(resam,1,median)
median(fh)-median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(0.025,0.975))
quantile(meds,c(0.025,0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts,group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1:10000, function(i) testStat(BCcounts,sample(group)))
mean(perms > obs)
testStat(DEcounts,grup)
testStat(DEcounts,group)
perms <- sapply(1:10000,function(i) testStat(DEcounts,sample(group)))
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
t.test(week2,baseline,paired = TRUE,var.equal = TRUE)
qt(0.975)
qt(0.975,4)
mean(baseline-week2)
mean(baseline-week2) + c(-1,1)*qt(0.975,df)
mean(baseline-week2) + c(-1,1)*qt(0.975,4)*sd(baseline-week2)/sqrt(4)
sd(baseline-week2)
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(8)
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(9)
pbinom(3,4,.5,lower.tail = TRUE)
3+c(-1,1)*qt(.95)*sd(c(1,1,1,0))/4
3+c(-1,1)*qt(.95,3)*sd(c(1,1,1,0))/4
1.5+c(-1,1)*qt(.95,3)*sd(c(1,1,1,0))/4
sd(c(1,1,1,0))
mean(c(1,1,1,1))
mean(c(1,1,1,0))
.75+c(-1,1)*qt(.95,3)*sd(c(1,1,1,0))/4
.5+c(-1,1)*qt(.95,3)*sd(c(1,1,0,0))/4
pbinom(3,4,.5,lower.tail = FALSE)
pbinom(2,4,.5,lower.tail=FALSE)
ppois
ppois(10,10/1787,lower.tail = TRUE)
ppois(10,1/100,lower.tail = TRUE)
ppois(10/1787,1/100,lower.tail = TRUE)
ppois(1/178.7,1/100,lower.tail = TRUE)
ppois(1/178.7,1/100,lower.tail = FALSE)
seq(-0.01, 5, 0.01)
ppois(seq(-0.01, 0.1, 0.01),1)
seq(-.01,0.1,0.01)
ppois(1,1)
ppois(100,1)
ppois(.1,1)
ppois(.01,1)
ppois(10/1787,1)
ppois(1,1)
ppois(.1,.1)
ppois(1,100)
ppois(.01,1)
ppois(3,1)
ppois(3,1,lower.tail = FALSE)
10/1787
10/1787 * 100
10/17.87
ppois(10/17.87,1,lower.tail = FALSE)
ppois(10/17.87,1,lower.tail = TRUE)
.01/04*10
pnorm(.01/04*10,lower.tail = FALSE)
power.t.test(100,delta = 0.01,sd = 0.04,sig.level = 0.05,type = "one.sample",alternative = "one.sided")
power.t.test(100,delta = 0.01,sd = 0.04,sig.level = 0.05,type = "one.sample",alternative = "one.sided")$power
power.t.test(power = 0.90, delta = 0.01,sd = 0.04,sig.level = 0.05,type = "one.sample",alternative = "one.sided")$n
power.t.test(100,delta = 0.01,sd = 0.04,sig.level = 0.05,type = "one.sample",alternative = "one.sided")$power
power.t.test(100,delta = 0.01,sd = 0.04,sig.level = 0.10,type = "one.sample",alternative = "one.sided")$power
-3-1 + c(-1,1)*qt(.95,16)*sqrt(1.5^2/2+1/8^2/2)*sqrt(1/9+1/9)
4/(sqrt(1.5^2/2+1/8^2/2)*sqrt(1/9+1/9))
ppois(10/17.87,1)
ppois(10/17.87,1,lower.tail = FALSE)
ppois(10/1787,.01,lower.tail = FALSE)
ppois(0,1,lower.tail = FALSE)
ppois(10,17.87,lower.tail = FALSE)
ppois(9,17.87,lower.tail = FALSE)
ppois(9,17.87,lower.tail = TRUE)
ppois(11,17.87,lower.tail = TRUE)
ppois(10,17.87,lower.tail = TRUE)
rexp(40,5)
mean(rexp(40,5))
sd(rexp(40,5))
test <- rexp(40,5)
mean(test)
sd(test)
runif(10)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(rexp(40,5))
repeat(rexp(2,5),2)
test <- matrix(rexp(40*1000,5),1000,40)
dim(test)
mean_test <- apply(test,1,mean)
mean(mean_test)
sd(mean_test)
var(mean_test)
.2/sqrt(40)
sd_test <- apply(test,1,sd)
mean(sd_test)
sd(sd_test)
data("ToothGrowth")
lambda <- 5
n <- 40
B <- 1000
exp_sim <- matrix(rexp(n*B,lambda),nrow = B,ncol = n)
var(exp_sim[1,])
var(exp_sim[2,])
var(exp_sim[1,])
exp_sim[1,] - mean(exp_sim[1,])
(exp_sim[1,] - mean(exp_sim[1,]))^2
sum((exp_sim[1,] - mean(exp_sim[1,]))^2)
sum((exp_sim[1,] - mean(exp_sim[1,]))^2)/40
sum((exp_sim[1,] - mean(exp_sim[1,]))^2)/39
var(exp_sim[1,])
sim_mean <- apply(exp_sim,1,mean)
sim_sd <- apply(exp_sim,1,sd)
sim_mean
sim_sd
p <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
fun.1 <- function(x) lambda*exp(-lambda*x)
p + stat_function(fun = fun.1) + xlim(-5,5)
require(ggplot2)
p + stat_function(fun = fun.1) + xlim(-5,5)
p + stat_function(fun = fun.1) + xlim(0,5)
p + stat_function(fun = fun.1)
p + stat_function(fun = x)
fun.1
fun.1(1)
fun.1(5)
fun.1(.1)
fun.1(0)
require(ggplot2)
lambda <- 0.2
n <- 40
B <- 1000
exp_sim <- matrix(rexp(n*B,lambda),nrow = B,ncol = n)
fun.1 <- function(x) lambda*exp(-lambda*x)
fun.1(.2)
fun.1(1)
fun.1(0)
integrate(fun.1,lower = 0,upper = infinite)
integrate(fun.1,lower = 0,upper = inf)
integrate(fun.1,lower = 0,upper = 1000)
integrate(fun.1,lower = 0,upper = .2)
qplot(seq(0,5,.1),y = fun.1(seq(0,5,.1)),geom = smooth())
qplot(seq(0,5,.1),y = fun.1(seq(0,5,.1)),geom = smooth)
qplot(seq(0,5,.1),y = fun.1(seq(0,5,.1)))
seq(0,5,.1)
plot(seq(0,5,.1),y = fun.1(seq(0,5,.1)))
plot(x= seq(0,5,.1),y = fun.1(seq(0,5,.1)))
plot(x = seq(0,5,.1),y = fun.1(seq(0,5,.1)))
fun.1(seq(0,5,.1))
require(ggplot2)
qplot(seq(0,5,.1),y = fun.1(seq(0,5,.1)))
qplot(x = c(1,2,3),y)
qplot(x = c(1,2,3),y = c(4,5,6))
qplot(x = c(1,2,3),y = c(4,5,6),geom = "point")
qplot(x = c(1,2,3),y = c(4,5,6),geom = "points")
qplot(x = c(1,2,3),y = c(4,5,6),geom = "point")
dev.off()
qplot(x = c(1,2,3),y = c(4,5,6),geom = "point")
qplot(seq(0,5,.1),y = fun.1(seq(0,5,.1)))
p <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
p + stat_function(fun = fun.1) + xlim(-5,5)
p + stat_function(fun = fun.1) + xlim(0,10)
p + stat_function(fun = fun.1) + xlim(0,10) + ylim(0,0.2)
fun.1
shiny::runApp('Documents/Coursera/Data Science Specialization (JHU)/Course 9 - Developing Data Products/DDP/Week 1/myApp')
setwd("~/Documents/Coursera/Data Science Specialization (JHU)/Course 9 - Developing Data Products/DDP/Week_2")
ls()
dir()
install.packages("leaflet")
library(leaflet)
parkData <- read.csv("https://www.aggdata.com/download_sample.php?file=national_park_service.csv",
stringsAsFactors = FALSE,na.strings = c("","na","NA"))
colnames(parkData)
parkData <- parkData[,c("Location.Name","Latitude","Longitude")]
colnames(parkData) <- c("popup","lat","lng")
head(parkData,5)
parkData$lat
parkData$lng
parkData$lat
is.na(parkData$lat)
is.na(parkData$lng)
!is.na(parkData$lng)
!is.na(parkData$lat) * !is.na(parkData$lng)
!is.na(parkData$lat) or !is.na(parkData$lng)
!is.na(parkData$lat) | !is.na(parkData$lng)
!is.na(parkData$lat) & !is.na(parkData$lng)
unlink('leaflet_ex_cache', recursive = TRUE)
